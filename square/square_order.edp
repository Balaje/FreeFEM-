/* Problem of finding the solution and order of convergence for
	-(uxx+uyy) = f(x,y) = 2*pi^2*sin(pi*x)*sin(pi*y) in \Omega
	u = 0 on \Gamma
	
	Exact solution u(x,y) = sin(pi*x)*sin(pi*y);
*/

bool debug = false;

int N = 20;

int n=5;
real[int] l2error(n), order(n);


for (int p=0; p<n; p++)
{
	mesh Th = square(N,N);
	fespace Vh (Th,P1); //Defining Piecewise Linear elements on space Vh;

	plot(Th,wait=debug);

	macro Grad(u) [dx(u),dy(u)] //Defining macros for Gradient.

	func f = 2*pi^2*sin(pi*x)*sin(pi*y); // Right hand side functions

	Vh uh, vh; //Choose uh and vh from Vh space

	Vh Ue;

	Ue = sin(pi*x)*sin(pi*y);
	
	varf a(uh,vh) = int2d(Th)(Grad(uh)'*Grad(vh)) + on(1,2,3,4,uh=0); //bilinear form

	matrix A = a(Vh,Vh); //Declaring the matrix A

	//Defining the linear form
	varf l(unused,vh) = int2d(Th)(f*vh);

	Vh F;
	//Defining the rhs vector
	F[] = l(0,Vh);

	set(A,solver=sparsesolver);
	//Solve the system of linear equations
	uh[] = A^-1*F[];

	//Defining the error
	Vh error = uh-Ue;
	
	l2error[p] = sqrt(int2d(Th)(error^2)); //Computing l^2error.
	cout<<endl<<"L^2 error = "<<l2error[p]<<endl;
	
	plot(uh,wait=debug);
	
	N = N*2;
}
//Finding out the order of Convergence
for(int j=0; j<n-1; j++)
{
	order[j] = log(l2error[j]/l2error[j+1])/log(2.);
	cout<<"Order of convergence = "<<order[j]<<endl;
}
