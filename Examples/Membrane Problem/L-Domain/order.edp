// Problem 1:  -(u_xx + u_yy) = f(x,y) = 0 on Omega,   u = g = xy on Gamma (profile.txt)
// Problem 1:  -(u_xx + u_yy) = f(x,y) = 2*pi^2*sin(pi*x)*cos(pi*y) on Omega,   u = g on Gamma (profile1.txt)

border g1(t=-1,0){x=t;y=-1;};
border g2(t=-1,0){x=0;y=t;};
border g3(t=0,1){x=t;y=0;};
border g4(t=0,1){x=1;y=t;};
border g5(t=1,-1){x=t;y=1;};
border g6(t=1,-1){x=-1;y=t;};

int N=20;
int n=4,p;

for (p=0; p<n; p++)
{
	mesh Th = buildmesh(g1(N)+g2(N)+g3(N)+g4(N)+g5(N)+g6(N));

	plot(Th,wait=true);

	fespace Vh(Th,P1);

	Vh u,v,ue;

	func f = 2*pi^2*sin(pi*x)*cos(pi*y);
	func  g = sin(pi*x)*cos(pi*y);

	problem Poisson(u,v) = int2d(Th)(dx(u)*dx(v)+dy(u)*dy(v)) - int2d(Th)(f*v) + on(g1,g5,u=-sin(pi*x)) + on(g2,g4,g6,u=0)
																			+ on(g3,u=sin(pi*x));
	Poisson;

	ue = g; //Projection of g on the space Vh;

	Vh error = u-ue;

	cout<<"L2 Error = "<<sqrt( int2d(Th)(error^2) )<<" & H1 error = "<<sqrt( int2d(Th)( error^2 + (dx(error))^2 + (dy(error))^2 ) );

	plot(u,wait = false);
	
	N = N*2;
}

