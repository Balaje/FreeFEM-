/* Program to solve the Cahn Hilliard Equation subject to 
	dirichlet boundary condtions
	
	u_t - \Laplacian^2 u = f in \Omega
	\Laplacian u = g_1 on \Partial \Omega
	u = g2 on \Partial \Omega
	
	Exact u(x,y,t) = exp(-t)*sin(pi*x)*sin(pi*y)
	f(x,y) = (-4*pi^4-1)*exp(-t)*sin(pi*x)*sin(pi*y)

*/

bool debug = true;
int N = 10;

mesh Th = square(N,N);
fespace Vh(Th,P1); //Using P1 elements

Vh uh,ph,phi,psi;

func real f(real t) {
	return (-4*pi^4-1)*exp(-t)*sin(pi*x)*sin(pi*y);
}
Vh u0 = sin(pi*x)*sin(pi*y);
Vh f1;

real T = 3.0, delt = 0.1, t;

macro Grad(u) [dx(u), dy(u)]//

//Problem - Coupled System
problem CH([uh,ph],[phi,psi]) = int2d(Th)(uh*phi + delt*Grad(ph)'*Grad(phi) - Grad(uh)'*Grad(psi) - ph*psi) - 
								int2d(Th)(delt*f1*phi + u0*phi) + on(1,2,3,4,uh=0,ph=0);

for (int i=0; i<T/delt; i++)
{
	t = (i+1)*delt;
	f1 = f(t);
	CH;
	u0 = uh;
	//plot(uh,wait=debug,value=true);
}

Vh ue = exp(-t)*sin(pi*x)*sin(pi*y);

plot(uh,wait=debug,value=debug);
plot(ue,wait=debug,value=debug);

real l2error = sqrt(int2d(Th)(uh-ue)^2);

cout<<"L2error = "<<l2error<<endl;